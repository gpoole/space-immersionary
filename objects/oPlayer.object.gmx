<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MaxThrust = 200
Rotating = false
Firing = false
phy_fixed_rotation = true

States[0] = "boost"
States[1] = "shoot"
State = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Don't Leave Room
if x &lt;= 0 {
    x = 0
    } else if x &gt;= room_width {
    x = room_width
}

if y &lt;= 0 {
    y = 0
    } else if y &gt; room_height {
    y = room_height
}

//BRAKE
if keyboard_check(ord('S')) {
    speed = 0.99*speed
}
   
// Pull thrusts off the queue and fire them 
if(instance_exists(oThrust)) {
    var next_thrust = instance_find(oThrust, 0);
    if(!Rotating) {
        if(!next_thrust.running) {
            // Not rotating yet and not facing the right way, so rotate to
            // face where we want to go
            if(round(abs(image_angle - next_thrust.Rotation)) &gt; 0) {
                Rotating = true
                RotationFrom = image_angle
                RotationDuration = 250
                RotationStart = current_time
                RotationAmount = ((next_thrust.Rotation - image_angle + 180) % 360) - 180
            }
            // We've set up our rotation and we know what delay we want so start firing
            next_thrust.start_delay = RotationDuration
            next_thrust.running = true
        }
    } else {
        // We're rowating arownd and arownd
        if((RotationStart + RotationDuration) &gt; current_time) {
            var rotation_t = (current_time - RotationStart) / RotationDuration;
            phy_rotation = -((RotationFrom + (RotationAmount * rotation_t)) % 360)
        } else {
            // We're done rotating
            Rotating = false
        }
    }
}

// Show the firing animation
if instance_exists(oThrust) {
    var thrust = instance_find(oThrust, 0)
    if (thrust.firing) {
        if(sprite_index != sPlayerBurn) {
            sprite_index = sPlayerBurn
        }
    } else {
        sprite_index = sPlayer
    }
} else {
    sprite_index = sPlayer
}


//ShootState
if Player_InState("shoot") {
    // BoostState = false
    sprite_index = sPlayerGun
    
    // TODO: Add rotation function to allow rotation to be set from multiple places
    // phy_rotation = -1*point_direction(x, y, mouse_x, mouse_y)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Player_InState("boost")) {
    with(oThrust){
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Player_InState("boost") {   
    var thrust_force = distance_to_point(mouse_x, mouse_y)
    
    if thrust_force &gt; 0 {
        var thrust = instance_create(x, y, oThrust);
        thrust.Rotation = point_direction(x,y,mouse_x,mouse_y)
        thrust.Thrust = (thrust_force)/ 200
    }
} else if Player_InState("shoot") {
    Bullet = instance_create(x,y,oRailBullet)
    with (Bullet) {
        RailGunForce = 1000
        BulletDirection = -1*point_direction(self.x, self.y, mouse_x, mouse_y)
        phy_rotation = BulletDirection
        var tx = 10*(RailGunForce * cos(degtorad(BulletDirection)));
        var ty = 10*(RailGunForce * sin(degtorad(BulletDirection)));
        physics_apply_force(self.x,self.y,tx,ty)
    }

    KickBack = -500
    BulletKickDirection = 1*point_direction(oPlayer.x, oPlayer.y, mouse_x, mouse_y)
    phy_rotation = BulletKickDirection
    var txkick = KickBack * cos(degtorad(BulletKickDirection));
    var tykick = KickBack * sin(degtorad(BulletKickDirection));
    physics_apply_force(x,y,txkick,-1*tykick)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        
//drawing a line
draw_set_colour(c_aqua);
draw_circle(mouse_x,mouse_y, 25, c_aqua)
//draw_circle(x,y,575,c_lime)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>image_angle</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Roll down through available states
Player_ChangeState(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Roll up through available states
Player_ChangeState(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,32</point>
    <point>16,48</point>
  </PhysicsShapePoints>
</object>
